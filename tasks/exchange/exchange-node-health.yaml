---
# This task will will check the health of the Exchange Server.

- name: Run Health Check for "{{ inventory_hostname }}"
  ansible.builtin.script: "scripts/exchange/exchange-node-health-check.ps1 -Username {{ winrm_username }} -Password {{ winrm_password }}"
  register: exchange_node_health_check

- name: Parse 'exchange_node_health_check' as JSON and set fact
  ansible.builtin.set_fact:
    exchange_node_health: "{{ exchange_node_health_check.stdout | from_json }}"

- name: Exchange Node Cluster State
  ansible.builtin.debug:
    msg: "Exchange Node Cluster State is {{ exchange_node_health['node_state']['State'] }}"
  when:
    - exchange_node_health['node_state']['State'] == 'Up'

- name: Fail Ansible Play if Exchange Node Cluster State is not 'Up'
  ansible.builtin.fail:
    msg:
    - "Exchange Node State is not 'Up'."
    - "{{ exchange_node_health['node_state'] }}"
  when:
    - not exchange_node_health['node_state']['State'] == 'Up'
    - not exchange_node_health_gather_only == 'yes'

- name: Exchange Node Services Health
  ansible.builtin.debug:
    msg: "All expected Exchange Node Services are Running."
  when:
    - exchange_node_health['service_health']
       | map(attribute='Status')
       | select('equalto', 'ServiceRunning')
       | length == exchange_node_health['service_health'] | length

- name: Fail Ansible Play if Exchange Services are not Running
  ansible.builtin.fail:
    msg:
    - "One or more Exchange Node Services are not Running"
    - "{{ exchange_node_health['service_health'] | map(attribute='Status') | select('equalto', 'ServiceNotRunning') }}"
  when:
    - not exchange_node_health['service_health']
       | map(attribute='Status')
       | select('equalto', 'ServiceRunning')
       | length == exchange_node_health['service_health'] | length
    - not exchange_node_health_gather_only == 'yes'

- name: Exchange Node Replication Health
  ansible.builtin.debug:
    msg: "All Exchange Replication Health Checks have passed."
  when:
    - exchange_node_health['replication_health']
       | map(attribute='Result')
       | select('equalto', 'Passed')
       | length == exchange_node_health['replication_health'] | length

- name: Fail Ansible Play if any Exchange Node Replication Checks have failed.
  ansible.builtin.fail:
    msg:
    - "One or more Exchange Node Replication Checks have failed"
    - "{{ exchange_node_health['replication_health'] | map(attribute='Result') | reject('equalto', 'Passed') }}"
  when:
    - not exchange_node_health['replication_health']
       | map(attribute='Result')
       | select('equalto', 'Passed')
       | length == exchange_node_health['replication_health'] | length
    - not exchange_node_health_gather_only == 'yes'

- name: Exchange Node Component Health
  ansible.builtin.debug:
    msg: "All expected Exchange Components are active."
  when:
    - exchange_node_health['server_component_state']
       | map(attribute='State')
       | select('equalto', 'Active')
       | length == exchange_node_health['server_component_state']
       | map(attribute='Component')
       | reject('equalto', 'ForwardSyncDaemon')
       | reject('equalto', 'ProvisioningRps')
       | length


# To Do:
# Set fact component state active
# Set fact component state serverwideoffline if true
#   Components expected to be inactive are 'ForwardSyncDaemon' & 'ProvisioningRps'
# Set fact any databases mounted
# Set fact all databases are healthy (active or mounted)
# Set fact any indexstates not healthy
# Set fact any copyqueuelengths above 10
# Set fact any replayqueuelengths above 10
# Set fact unhealthy databases if conditions above are !true

# Done:
# Set fact Node State
# Set fact all services running
# Set fact services not running, if all services running !true
# Set fact replication checks passed
# Set fact replication checks that have failed, if replication checks passed !true
