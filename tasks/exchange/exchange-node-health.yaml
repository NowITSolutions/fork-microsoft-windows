---
# This task will will check the health of the Exchange Server.

- name: Run Health Check for "{{ inventory_hostname }}"
  ansible.builtin.script: "scripts/exchange/exchange-node-health-check.ps1 -Username {{ winrm_username }} -Password {{ winrm_password }}"
  register: exchange_node_health_check

- name: Parse 'exchange_node_health_check' as JSON and set fact
  set_fact:
    exchange_node_health: "{{ exchange_node_health_check.stdout | from_json }}"

#- name: Exchange Node Health
#  ansible.builtin.debug:
#    msg: "{{ exchange_node_health }}"

- name: Exchange Node State
  ansible.builtin.debug:
    msg: "{{ exchange_node_health['node_state']['State'] }}"

# Set fact Node State
# Set fact all services running
# Set fact services not running, if all services running !true
# Set fact replication checks passed
# Set fact replication checks that have failed, if replication checks passed !true
# Set fact component state active
# Set fact component state serverwideoffline if true
#   Components expected to be inactive are 'ForwardSyncDaemon' & 'ProvisioningRps'
# Set fact any databases mounted
# Set fact all databases are healthy (active or mounted)
# Set fact any indexstates not healthy
# Set fact any copyqueuelengths above 10
# Set fact any replayqueuelengths above 10
# Set fact unhealthy databases if conditions above are !true


#- name: Fail Ansible Play if Exchange Node State is not 'Up'
#  fail:
#    msg:
#    - "Exchange Node State is not 'Up'."
#    - "{{ exchange_node_health }}"
#  when:
#    - not sql_replicas_healthy['sql_availability_group_replicas']
#       | map(attribute='ConnectionState')
#       | select('equalto', 'Connected')
#       | length == sql_replicas_healthy['sql_availability_group_replicas'] | length
#    - not sql_replicas_healthy['sql_availability_group_replicas']
#       | map(attribute='RollupSynchronizationState')
#       | select('equalto', 'Synchronized')
#       | length == sql_replicas_healthy['sql_availability_group_replicas'] | length

#- name: SQL Replicas Health Status
#  ansible.builtin.debug:
#    msg: "SQL Replicas Health Check on {{ ansible_host }} was Successful"
#  when:
#    - sql_replicas_healthy['sql_availability_group_replicas']
#       | map(attribute='ConnectionState')
#       | select('equalto', 'Connected')
#       | length == sql_replicas_healthy['sql_availability_group_replicas'] | length
#    - sql_replicas_healthy['sql_availability_group_replicas']
#       | map(attribute='RollupSynchronizationState')
#       | select('equalto', 'Synchronized')
#       | length == sql_replicas_healthy['sql_availability_group_replicas'] | length
#
#- name: Fail Ansible Play if SQL Replicas Node Health Check Fails
#  fail:
#    msg:
#    - "SQL Replica Node Health Check has Failed."
#    - "{{ sql_replicas_healthy }}"
#  when:
#    - not sql_replicas_healthy['sql_availability_group_replicas']
#       | map(attribute='ConnectionState')
#       | select('equalto', 'Connected')
#       | length == sql_replicas_healthy['sql_availability_group_replicas'] | length
#    - not sql_replicas_healthy['sql_availability_group_replicas']
#       | map(attribute='RollupSynchronizationState')
#       | select('equalto', 'Synchronized')
#       | length == sql_replicas_healthy['sql_availability_group_replicas'] | length