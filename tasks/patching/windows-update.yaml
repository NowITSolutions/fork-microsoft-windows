---
# This task will patch a Windows device as many times as is required to install all available updates"
#
# Required Variable:
#  - {{ windows_update_mode }} : This tells the update task which updates to include or exclude, and can be one of three options:
#      "all" - This mode will install all updates available to the system (it will still honor the 'reject_updates' list).
#      "excludeexchange" - This mode will install all updates available to the system, except Exchange updates (it will still honor the 'reject_updates' list).
#      "specific" - This mode will install only updates you specifically provide through the 'kbs_to_install' list.
#  - {{ reject_updates }} : List of updates to reject, can be the KBs and or regex for descriptions
#      In the example below i have excluded some Defender and Driver updates that were getting stuck in update loops.
#        reject_updates:
#          - KB2267602
#          - '.*Driver.*'
#          - '.*Defender.*'
#          - '.*Exchange.*'
#  - {{ wsus }} : This can be one of three options:
#      "default" - this lets the end point decide which update source to use
#      "managed_server" - this lets you select wsus as the update source to use
#      "windows_update" - this lets you select Windows public servers as the update source
#
# Notes: The way i had to handle the various patching modes is quite annoying.
# Unfortuntely this is a limitation with how Ansible works, even if a task is skipped, the "register" variable is still recorded.
# This means that i cannot just refer to "windows_update_result" i have to have 3 versions of it for each patching mode.
# This is expected behaviour for Ansible: https://github.com/ansible/ansible/issues/15710.
# This can be managed by using tags, but that added additional execution requirements, and i want to keep this simple.

- name: Install All Available Windows updates
  ansible.windows.win_updates:
    category_names: '*'
    reject_list: "{{ reject_updates }}"
    server_selection: "{{ wsus }}"
    reboot: yes
    reboot_timeout: 1200
    log_path: c:\programdata\ansible_patchlog.log
  become: yes
  become_method: runas
  become_user: "{{ ansible_user }}"
  register: windows_update_result_all
  until: windows_update_result_all.changed == false
  retries: 20
  delay: 60
  when: windows_update_mode == "all"

- name: Install All Available Windows updates (Excluding Exchange Updates)
  ansible.windows.win_updates:
    category_names: '*'
    reject_list: "{{ reject_updates + [ '.*Exchange.*' ] }}"
    server_selection: "{{ wsus }}"
    reboot: yes
    reboot_timeout: 1200
    log_path: c:\programdata\ansible_patchlog.log
  become: yes
  become_method: runas
  become_user: "{{ ansible_user }}"
  register: windows_update_result_excludeexch
  until: windows_update_result_excludeexch.changed == false
  retries: 20
  delay: 60
  when: windows_update_mode == "excludeexchange"

- name: Install Specific Windows updates
  ansible.windows.win_updates:
    category_names: '*'
    accept_list: "{{ kbs_to_install }}"
    state: installed
    server_selection: "{{ wsus }}"
    reboot: yes
    reboot_timeout: 1200
    log_path: c:\programdata\ansible_patchlog.log
  register: windows_update_result_specific
  until: windows_update_result_specific.changed == false
  retries: 20
  delay: 60
  when: windows_update_mode == "specific"

- name: Wait for server to come back online
  ansible.builtin.wait_for_connection:
    delay: 0
    connect_timeout: 5
    sleep: 60
    timeout: 1200
  when: (windows_update_result_all.reboot_required | default(false)) or
        (windows_update_result_specific.reboot_required | default(false)) or
        (windows_update_result_excludeexch.reboot_required | default(false))

- name: Patching Results - All
  ansible.builtin.debug:
    msg: "{{ windows_update_result_all }}"
  when: windows_update_mode == "all"

- name: Patching Results - Exclude Exchange
  ansible.builtin.debug:
    msg: "{{ windows_update_result_excludeexch }}"
  when: windows_update_mode == "excludeexch"

- name: Patching Results - Specific
  ansible.builtin.debug:
    msg: "{{ windows_update_result_specific }}"
  when: windows_update_mode == "specific" 